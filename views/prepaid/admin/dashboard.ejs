<div class="container-fluid px-4 py-6">
    <!-- Page Header -->
    <div class="mb-6">
        <h1 class="text-3xl font-bold text-gray-800 mb-2">
            <i class="fas fa-chart-line text-yellow-600 mr-3"></i>
            Dashboard Prepaid System
        </h1>
        <p class="text-gray-600">Overview sistem prepaid dan statistik real-time</p>
    </div>

    <!-- Statistics Cards -->
    <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-6">
        <!-- Active Customers -->
        <div class="bg-gradient-to-br from-blue-500 to-blue-600 rounded-xl shadow-lg p-6 text-white">
            <div class="flex items-center justify-between mb-4">
                <div class="w-12 h-12 bg-white/20 rounded-lg flex items-center justify-center">
                    <i class="fas fa-users text-2xl"></i>
                </div>
                <span class="text-sm bg-white/20 px-3 py-1 rounded-full">Active</span>
            </div>
            <div class="text-3xl font-bold mb-1"><%= stats ? stats.active_customers : 0 %></div>
            <div class="text-blue-100 text-sm">Customer Aktif</div>
        </div>

        <!-- Expired Customers -->
        <div class="bg-gradient-to-br from-red-500 to-red-600 rounded-xl shadow-lg p-6 text-white">
            <div class="flex items-center justify-between mb-4">
                <div class="w-12 h-12 bg-white/20 rounded-lg flex items-center justify-center">
                    <i class="fas fa-exclamation-triangle text-2xl"></i>
                </div>
                <span class="text-sm bg-white/20 px-3 py-1 rounded-full">Expired</span>
            </div>
            <div class="text-3xl font-bold mb-1"><%= stats ? stats.expired_customers : 0 %></div>
            <div class="text-red-100 text-sm">Customer Expired</div>
        </div>

        <!-- Expiring Soon -->
        <div class="bg-gradient-to-br from-yellow-500 to-yellow-600 rounded-xl shadow-lg p-6 text-white">
            <div class="flex items-center justify-between mb-4">
                <div class="w-12 h-12 bg-white/20 rounded-lg flex items-center justify-center">
                    <i class="fas fa-clock text-2xl"></i>
                </div>
                <span class="text-sm bg-white/20 px-3 py-1 rounded-full">7 Days</span>
            </div>
            <div class="text-3xl font-bold mb-1"><%= stats ? stats.expiring_soon : 0 %></div>
            <div class="text-yellow-100 text-sm">Akan Berakhir</div>
        </div>

        <!-- Revenue Today -->
        <div class="bg-gradient-to-br from-green-500 to-green-600 rounded-xl shadow-lg p-6 text-white">
            <div class="flex items-center justify-between mb-4">
                <div class="w-12 h-12 bg-white/20 rounded-lg flex items-center justify-center">
                    <i class="fas fa-money-bill-wave text-2xl"></i>
                </div>
                <span class="text-sm bg-white/20 px-3 py-1 rounded-full">Today</span>
            </div>
            <div class="text-3xl font-bold mb-1">
                Rp <%= revenueToday && revenueToday.revenue ? revenueToday.revenue.toLocaleString('id-ID') : '0' %>
            </div>
            <div class="text-green-100 text-sm">Pendapatan Hari Ini (<%= revenueToday ? revenueToday.total_transactions : 0 %> transaksi)</div>
        </div>
    </div>

    <div class="grid grid-cols-1 lg:grid-cols-2 gap-6 mb-6">
        <!-- Active Customers List -->
        <div class="bg-white rounded-xl shadow-lg p-6">
            <div class="flex items-center justify-between mb-4">
                <h3 class="text-lg font-bold text-gray-800">
                    <i class="fas fa-check-circle text-green-600 mr-2"></i>
                    Customer Aktif
                </h3>
                <a href="/prepaid/customers" class="text-blue-600 hover:text-blue-800 text-sm font-semibold">
                    Lihat Semua <i class="fas fa-arrow-right ml-1"></i>
                </a>
            </div>

            <% if (activeCustomers && activeCustomers.length > 0) { %>
            <div class="space-y-3">
                <% activeCustomers.forEach(function(customer) { %>
                <div class="flex items-center justify-between p-3 bg-gray-50 rounded-lg hover:bg-gray-100 transition">
                    <div class="flex items-center">
                        <div class="w-10 h-10 bg-blue-500 rounded-full flex items-center justify-center text-white font-bold mr-3">
                            <%= customer.name ? customer.name.charAt(0).toUpperCase() : 'C' %>
                        </div>
                        <div>
                            <div class="font-semibold text-gray-800"><%= customer.name %></div>
                            <div class="text-sm text-gray-600">
                                <%= customer.package_name %> - <%= customer.download_mbps %>/<%= customer.upload_mbps %> Mbps
                            </div>
                        </div>
                    </div>
                    <div class="text-right">
                        <div class="text-sm text-gray-600">Berakhir:</div>
                        <div class="font-semibold text-gray-800">
                            <%= customer.days_remaining %> hari lagi
                        </div>
                    </div>
                </div>
                <% }); %>
            </div>
            <% } else { %>
            <div class="text-center py-8 text-gray-500">
                <i class="fas fa-inbox text-4xl mb-2"></i>
                <p>Belum ada customer aktif</p>
            </div>
            <% } %>
        </div>

        <!-- Expiring Soon List -->
        <div class="bg-white rounded-xl shadow-lg p-6">
            <div class="flex items-center justify-between mb-4">
                <h3 class="text-lg font-bold text-gray-800">
                    <i class="fas fa-exclamation-circle text-yellow-600 mr-2"></i>
                    Akan Berakhir (7 Hari)
                </h3>
                <a href="/prepaid/subscriptions" class="text-blue-600 hover:text-blue-800 text-sm font-semibold">
                    Lihat Semua <i class="fas fa-arrow-right ml-1"></i>
                </a>
            </div>

            <% if (expiringSoon && expiringSoon.length > 0) { %>
            <div class="space-y-3">
                <% expiringSoon.forEach(function(customer) { %>
                <div class="flex items-center justify-between p-3 bg-yellow-50 rounded-lg border-l-4 border-yellow-500">
                    <div class="flex items-center">
                        <div class="w-10 h-10 bg-yellow-500 rounded-full flex items-center justify-center text-white font-bold mr-3">
                            <%= customer.name ? customer.name.charAt(0).toUpperCase() : 'C' %>
                        </div>
                        <div>
                            <div class="font-semibold text-gray-800"><%= customer.name %></div>
                            <div class="text-sm text-gray-600">
                                <%= customer.package_name %>
                            </div>
                        </div>
                    </div>
                    <div class="text-right">
                        <div class="text-lg font-bold text-yellow-700">
                            <%= customer.days_remaining %> hari
                        </div>
                        <div class="text-xs text-gray-600">
                            <%= new Date(customer.expiry_date).toLocaleDateString('id-ID') %>
                        </div>
                    </div>
                </div>
                <% }); %>
            </div>
            <% } else { %>
            <div class="text-center py-8 text-gray-500">
                <i class="fas fa-check-circle text-4xl mb-2 text-green-500"></i>
                <p>Tidak ada customer yang akan berakhir</p>
            </div>
            <% } %>
        </div>
    </div>

    <!-- Interface Traffic Realtime -->
    <div class="bg-white rounded-xl shadow-lg p-6 mb-6">
        <div class="flex items-center justify-between mb-4">
            <h3 class="text-lg font-bold text-gray-800">
                <i class="fas fa-chart-area text-blue-600 mr-2"></i>
                Interface Traffic Realtime
            </h3>
            <% if (typeof interfaces !== 'undefined' && interfaces && interfaces.length > 0) { %>
            <div class="flex items-center gap-3">
                <select id="interfaceSelect" multiple class="border border-gray-300 rounded-lg px-3 py-2 text-sm focus:ring-2 focus:ring-blue-500 focus:border-blue-500">
                    <% interfaces.forEach(function(iface) { %>
                    <option value="<%= iface.name %>" data-running="<%= iface.running %>"><%= iface.name %> (<%= iface.running ? 'Running' : 'Down' %>)</option>
                    <% }); %>
                </select>
                <button onclick="toggleMonitoring()" id="monitoringBtn" class="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition text-sm font-semibold">
                    <i class="fas fa-play mr-2"></i>Start Monitor
                </button>
            </div>
            <% } else { %>
            <span class="text-sm text-red-600">
                <i class="fas fa-exclamation-circle mr-1"></i>
                MikroTik tidak terhubung atau belum dikonfigurasi
            </span>
            <% } %>
        </div>
        
        <% if (typeof interfaces !== 'undefined' && interfaces && interfaces.length > 0) { %>
        <div class="h-64 mb-4">
            <canvas id="trafficChart"></canvas>
        </div>
        <div id="interfaceLegend" class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-3"></div>
        <% } else { %>
        <div class="h-64 flex items-center justify-center bg-gray-50 rounded-lg">
            <div class="text-center">
                <i class="fas fa-network-wired text-6xl text-gray-300 mb-4"></i>
                <p class="text-gray-500 text-lg font-semibold mb-2">MikroTik Belum Terhubung</p>
                <p class="text-gray-400 text-sm">Silakan konfigurasi MikroTik di menu Settings > MikroTik</p>
                <a href="/mikrotik/settings" class="inline-block mt-4 px-6 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition">
                    <i class="fas fa-cog mr-2"></i>Konfigurasi MikroTik
                </a>
            </div>
        </div>
        <% } %>
    </div>

    <!-- Recent Transactions -->
    <div class="bg-white rounded-xl shadow-lg p-6">
        <div class="flex items-center justify-between mb-4">
            <h3 class="text-lg font-bold text-gray-800">
                <i class="fas fa-receipt text-purple-600 mr-2"></i>
                Transaksi Terbaru
            </h3>
            <a href="/prepaid/reports" class="text-blue-600 hover:text-blue-800 text-sm font-semibold">
                Lihat Laporan <i class="fas fa-arrow-right ml-1"></i>
            </a>
        </div>

        <% if (recentTransactions && recentTransactions.length > 0) { %>
        <div class="overflow-x-auto">
            <table class="w-full">
                <thead>
                    <tr class="border-b border-gray-200">
                        <th class="text-left py-3 px-4 text-sm font-semibold text-gray-600">Invoice</th>
                        <th class="text-left py-3 px-4 text-sm font-semibold text-gray-600">Customer</th>
                        <th class="text-left py-3 px-4 text-sm font-semibold text-gray-600">Tanggal</th>
                        <th class="text-right py-3 px-4 text-sm font-semibold text-gray-600">Total</th>
                        <th class="text-center py-3 px-4 text-sm font-semibold text-gray-600">Status</th>
                    </tr>
                </thead>
                <tbody>
                    <% recentTransactions.forEach(function(trx) { %>
                    <tr class="border-b border-gray-100 hover:bg-gray-50 transition">
                        <td class="py-3 px-4">
                            <span class="font-mono text-sm"><%= trx.invoice_number %></span>
                        </td>
                        <td class="py-3 px-4">
                            <div class="font-semibold text-gray-800"><%= trx.customer_name %></div>
                            <div class="text-xs text-gray-500"><%= trx.customer_code %></div>
                        </td>
                        <td class="py-3 px-4 text-sm text-gray-600">
                            <%= new Date(trx.created_at).toLocaleDateString('id-ID') %>
                        </td>
                        <td class="py-3 px-4 text-right font-semibold text-gray-800">
                            Rp <%= trx.total_amount.toLocaleString('id-ID') %>
                        </td>
                        <td class="py-3 px-4 text-center">
                            <% if (trx.status === 'paid') { %>
                            <span class="bg-green-100 text-green-700 px-3 py-1 rounded-full text-xs font-semibold">
                                <i class="fas fa-check-circle mr-1"></i>Lunas
                            </span>
                            <% } else if (trx.status === 'partial') { %>
                            <span class="bg-yellow-100 text-yellow-700 px-3 py-1 rounded-full text-xs font-semibold">
                                <i class="fas fa-clock mr-1"></i>Partial
                            </span>
                            <% } else { %>
                            <span class="bg-gray-100 text-gray-700 px-3 py-1 rounded-full text-xs font-semibold">
                                <%= trx.status %>
                            </span>
                            <% } %>
                        </td>
                    </tr>
                    <% }); %>
                </tbody>
            </table>
        </div>
        <% } else { %>
        <div class="text-center py-8 text-gray-500">
            <i class="fas fa-receipt text-4xl mb-2"></i>
            <p>Belum ada transaksi</p>
        </div>
        <% } %>
    </div>

    <!-- Quick Actions -->
    <div class="mt-6 grid grid-cols-1 md:grid-cols-4 gap-4">
        <a href="/prepaid/customers" class="bg-blue-50 hover:bg-blue-100 rounded-lg p-4 flex items-center justify-between transition">
            <div>
                <div class="font-semibold text-blue-900">Kelola Customer</div>
                <div class="text-sm text-blue-600">Lihat & kelola customer prepaid</div>
            </div>
            <i class="fas fa-users text-2xl text-blue-600"></i>
        </a>
        <a href="/prepaid/packages" class="bg-green-50 hover:bg-green-100 rounded-lg p-4 flex items-center justify-between transition">
            <div>
                <div class="font-semibold text-green-900">Kelola Paket</div>
                <div class="text-sm text-green-600">Atur paket & harga</div>
            </div>
            <i class="fas fa-box text-2xl text-green-600"></i>
        </a>
        <a href="/prepaid/reports" class="bg-purple-50 hover:bg-purple-100 rounded-lg p-4 flex items-center justify-between transition">
            <div>
                <div class="font-semibold text-purple-900">Lihat Laporan</div>
                <div class="text-sm text-purple-600">Revenue & statistik</div>
            </div>
            <i class="fas fa-chart-bar text-2xl text-purple-600"></i>
        </a>
        <button onclick="runScheduler()" class="bg-orange-50 hover:bg-orange-100 rounded-lg p-4 flex items-center justify-between transition">
            <div>
                <div class="font-semibold text-orange-900">Run Scheduler</div>
                <div class="text-sm text-orange-600">Cek expiry & notifikasi</div>
            </div>
            <i class="fas fa-sync text-2xl text-orange-600"></i>
        </button>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/chart.js@4.4.0/dist/chart.umd.min.js"></script>
    <script>
    async function runScheduler() {
        if (!confirm('Jalankan scheduler sekarang?\n\nScheduler akan:\n- Deactivate expired subscriptions\n- Send expiry notifications\n- Restore renewed customers')) {
            return;
        }

        const btn = event.target.closest('button');
        const icon = btn.querySelector('i');
        const originalText = btn.querySelector('.font-semibold').textContent;
        
        btn.querySelector('.font-semibold').textContent = 'Running...';
        icon.classList.add('fa-spin');
        btn.disabled = true;

        try {
            const response = await fetch('/prepaid/trigger-scheduler', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' }
            });
            
            const result = await response.json();
            
            if (result.success) {
                alert('✅ Scheduler berhasil dijalankan!\n\nRefresh halaman untuk melihat update.');
                location.reload();
            } else {
                alert('❌ Error: ' + (result.error || 'Unknown error'));
            }
        } catch (error) {
            alert('❌ Error: ' + error.message);
        } finally {
            btn.querySelector('.font-semibold').textContent = originalText;
            icon.classList.remove('fa-spin');
            btn.disabled = false;
        }
    }

    // Interface Traffic Monitoring
    <% if (typeof interfaces !== 'undefined' && interfaces && interfaces.length > 0) { %>
    let chart = null;
    let updateInterval = null;
    let previousData = {};
    let isMonitoring = false;
    let isFirstSample = true; // Skip first sample for accurate rate calculation
    let smoothingBuffer = {}; // Buffer untuk smoothing (store 7 samples for better stability)
    let lastValidRate = {}; // Store last valid rate untuk outlier detection

    const colors = ['#3b82f6', '#10b981', '#f59e0b', '#ef4444', '#8b5cf6', '#ec4899', '#06b6d4', '#84cc16'];

    function initChart() {
        const ctx = document.getElementById('trafficChart');
        if (!ctx) {
            console.error('Canvas element not found');
            return;
        }

        if (typeof Chart === 'undefined') {
            console.error('Chart.js not loaded');
            alert('Chart.js belum dimuat. Silakan refresh halaman.');
            return;
        }

        const labels = Array.from({length: 30}, (_, i) => (i * 2) + 's');
        
        chart = new Chart(ctx, {
            type: 'line',
            data: {
                labels: labels,
                datasets: []
            },
            options: {
                responsive: true,
                maintainAspectRatio: false,
                interaction: {
                    mode: 'index',
                    intersect: false
                },
                plugins: {
                    legend: {
                        display: false
                    },
                    tooltip: {
                        callbacks: {
                            label: function(context) {
                                return context.dataset.label + ': ' + formatSpeed(context.parsed.y);
                            }
                        }
                    }
                },
                scales: {
                    y: {
                        beginAtZero: true,
                        ticks: {
                            callback: function(value) {
                                return formatSpeed(value);
                            }
                        }
                    }
                }
            }
        });
    }

    function updateChart(selectedInterfaces) {
        if (!chart) return;

        const newDatasets = [];
        selectedInterfaces.forEach((iface, idx) => {
            const color = colors[idx % colors.length];
            const bgColorRx = color + '40';
            const bgColorTx = color + '20';

            newDatasets.push({
                label: `${iface.name} RX (Download)`,
                data: Array(30).fill(0),
                borderColor: color,
                backgroundColor: bgColorRx,
                borderWidth: 2,
                tension: 0.4,
                fill: false,
                pointRadius: 0,
                interfaceName: iface.name,
                dataType: 'rx'
            });

            newDatasets.push({
                label: `${iface.name} TX (Upload)`,
                data: Array(30).fill(0),
                borderColor: color,
                backgroundColor: bgColorTx,
                borderWidth: 2,
                borderDash: [5, 5],
                tension: 0.4,
                fill: false,
                pointRadius: 0,
                interfaceName: iface.name,
                dataType: 'tx'
            });
        });

        chart.data.datasets = newDatasets;
        updateLegend(selectedInterfaces);

        const newPreviousData = {};
        selectedInterfaces.forEach(iface => {
            newPreviousData[iface.name] = previousData[iface.name] || {
                rx: parseInt(iface['rx-byte'] || iface.rxByte || 0),
                tx: parseInt(iface['tx-byte'] || iface.txByte || 0)
            };
        });
        previousData = newPreviousData;

        chart.update('none');
    }

    function updateLegend(selectedInterfaces) {
        const legendDiv = document.getElementById('interfaceLegend');
        if (!legendDiv) return;

        legendDiv.innerHTML = selectedInterfaces.map(iface => {
            const running = iface.running;
            const statusColor = running ? 'rgb(34, 197, 94)' : 'rgb(156, 163, 175)';
            return `
                <div data-interface-legend="${iface.name}" style="display: flex; flex-direction: column; gap: 0.375rem; font-size: 0.75rem; padding: 0.625rem; background: #f9fafb; border-radius: 0.375rem; border-left: 3px solid ${iface.color};">
                    <div style="display: flex; align-items: center; gap: 0.5rem;">
                        <span style="height: 0.75rem; width: 0.75rem; border-radius: 9999px; background-color: ${iface.color}; flex-shrink: 0;"></span>
                        <span style="font-weight: 700; color: #374151; flex-shrink: 0; font-size: 0.8rem;">${iface.name}</span>
                        <span style="height: 0.375rem; width: 0.375rem; border-radius: 9999px; background-color: ${statusColor}; margin-left: auto; flex-shrink: 0;"></span>
                    </div>
                    <div style="display: flex; gap: 1rem; padding-left: 1.25rem; font-size: 0.7rem; font-family: monospace;">
                        <div style="display: flex; flex-direction: column; gap: 0.125rem;">
                            <div style="display: flex; align-items: center; gap: 0.375rem;">
                                <div style="width: 1.5rem; height: 2px; background-color: ${iface.color}; border-radius: 1px;"></div>
                                <span style="color: #6b7280; font-weight: 500; font-size: 0.65rem;">RX (Download)</span>
                            </div>
                            <span data-speed-rx="${iface.name}" style="color: #2563eb; font-weight: 700; font-size: 0.75rem; padding-left: 2rem;">0 b/s</span>
                        </div>
                        <div style="display: flex; flex-direction: column; gap: 0.125rem;">
                            <div style="display: flex; align-items: center; gap: 0.375rem;">
                                <div style="width: 1.5rem; height: 2px; background: repeating-linear-gradient(to right, ${iface.color} 0, ${iface.color} 4px, transparent 4px, transparent 8px); border-radius: 1px;"></div>
                                <span style="color: #6b7280; font-weight: 500; font-size: 0.65rem;">TX (Upload)</span>
                            </div>
                            <span data-speed-tx="${iface.name}" style="color: #059669; font-weight: 700; font-size: 0.75rem; padding-left: 2rem;">0 b/s</span>
                        </div>
                    </div>
                </div>
            `;
        }).join('');
    }

    function formatSpeed(bytesPerSec) {
        if (bytesPerSec >= 1000000000) {
            return (bytesPerSec / 1000000000).toFixed(2) + ' Gb/s';
        } else if (bytesPerSec >= 1000000) {
            return (bytesPerSec / 1000000).toFixed(2) + ' Mb/s';
        } else if (bytesPerSec >= 1000) {
            return (bytesPerSec / 1000).toFixed(2) + ' Kb/s';
        }
        return bytesPerSec.toFixed(0) + ' b/s';
    }

    // Advanced Smoothing function dengan outlier filtering
    function getSmoothedValue(ifaceName, dataType, newValue) {
        const key = `${ifaceName}_${dataType}`;
        
        if (!smoothingBuffer[key]) {
            smoothingBuffer[key] = [];
            lastValidRate[key] = 0;
        }
        
        // STEP 1: Outlier Detection - filter nilai yang terlalu ekstrem
        const lastRate = lastValidRate[key];
        const maxChange = Math.max(lastRate * 3, 50000000); // Max 3x perubahan atau 50 Mbps
        
        // Jika perubahan terlalu besar, anggap sebagai outlier dan gunakan nilai sebelumnya
        if (lastRate > 0 && Math.abs(newValue - lastRate) > maxChange) {
            console.log(`[${ifaceName}] Outlier detected: ${(newValue/8000000).toFixed(2)} Mbps (expected ~${(lastRate/8000000).toFixed(2)} Mbps)`);
            newValue = lastRate; // Use last valid value instead
        }
        
        // STEP 2: Minimum threshold - jika terlalu kecil, set ke 0
        if (newValue < 100000) { // < 0.1 Mbps
            newValue = 0;
        }
        
        // STEP 3: Add to buffer
        smoothingBuffer[key].push(newValue);
        
        // STEP 4: Keep last 7 samples (larger window for more stability)
        if (smoothingBuffer[key].length > 7) {
            smoothingBuffer[key].shift();
        }
        
        // STEP 5: Calculate weighted moving average (lebih berat ke nilai terbaru)
        let sum = 0;
        let weightSum = 0;
        const buffer = smoothingBuffer[key];
        
        for (let i = 0; i < buffer.length; i++) {
            const weight = i + 1; // Weight meningkat untuk nilai lebih baru
            sum += buffer[i] * weight;
            weightSum += weight;
        }
        
        const smoothed = sum / weightSum;
        
        // STEP 6: Update last valid rate
        if (smoothed > 0) {
            lastValidRate[key] = smoothed;
        }
        
        return smoothed;
    }

    let failedAttempts = 0;
    const MAX_FAILED_ATTEMPTS = 5;

    function startUpdateInterval() {
        if (updateInterval) clearInterval(updateInterval);

        updateInterval = setInterval(async () => {
            try {
                // Add timeout untuk fetch request
                const controller = new AbortController();
                const timeoutId = setTimeout(() => controller.abort(), 5000); // 5 detik timeout

                const response = await fetch('/api/interface-stats', {
                    signal: controller.signal
                });
                clearTimeout(timeoutId);

                if (!response.ok) {
                    console.error('Failed to fetch interface stats:', response.status);
                    failedAttempts++;
                    
                    // Auto-restart if too many failures
                    if (failedAttempts >= MAX_FAILED_ATTEMPTS && isMonitoring) {
                        console.log('Too many failed attempts, restarting monitor...');
                        toggleMonitoring(); // Stop
                        setTimeout(() => {
                            toggleMonitoring(); // Start again
                            failedAttempts = 0;
                        }, 3000);
                    }
                    return;
                }

                const newData = await response.json();
                
                // Reset failed attempts on success
                failedAttempts = 0;

                const interfaceNames = [...new Set(chart.data.datasets.map(d => d.interfaceName))];

                interfaceNames.forEach((ifaceName) => {
                    const newIface = newData.find(i => i.name === ifaceName);

                    if (newIface) {
                        const rxBytes = parseInt(newIface['rx-byte'] || newIface.rxByte || 0);
                        const txBytes = parseInt(newIface['tx-byte'] || newIface.txByte || 0);

                        // Initialize previousData jika belum ada
                        if (!previousData[ifaceName]) {
                            previousData[ifaceName] = { rx: rxBytes, tx: txBytes };
                            return; // Skip first sample untuk akurasi
                        }

                        // Hitung rate (bytes per second) - interval 2 detik
                        let rxRate = Math.max(0, (rxBytes - previousData[ifaceName].rx) / 2);
                        let txRate = Math.max(0, (txBytes - previousData[ifaceName].tx) / 2);

                        // Deteksi counter reset (jika byte baru < byte lama)
                        if (rxBytes < previousData[ifaceName].rx) {
                            console.log(`[${ifaceName}] RX counter reset detected`);
                            rxRate = 0;
                            previousData[ifaceName].rx = rxBytes; // Reset base untuk next calculation
                        }
                        if (txBytes < previousData[ifaceName].tx) {
                            console.log(`[${ifaceName}] TX counter reset detected`);
                            txRate = 0;
                            previousData[ifaceName].tx = txBytes; // Reset base untuk next calculation
                        }

                        // Validasi maksimum rate - filter nilai yang tidak masuk akal
                        // Asumsikan max 10 Gbps (10000 Mbps) untuk interface apapun
                        const MAX_RATE_BYTES = 1250000000; // 10 Gbps in bytes/sec
                        if (rxRate > MAX_RATE_BYTES) {
                            console.log(`[${ifaceName}] Invalid RX rate: ${(rxRate*8/1000000).toFixed(2)} Mbps, using 0`);
                            rxRate = 0;
                        }
                        if (txRate > MAX_RATE_BYTES) {
                            console.log(`[${ifaceName}] Invalid TX rate: ${(txRate*8/1000000).toFixed(2)} Mbps, using 0`);
                            txRate = 0;
                        }

                        // Apply smoothing (moving average)
                        const smoothedRxRate = getSmoothedValue(ifaceName, 'rx', rxRate);
                        const smoothedTxRate = getSmoothedValue(ifaceName, 'tx', txRate);

                        // Convert to bits per second
                        const rxBitsPerSec = smoothedRxRate * 8;
                        const txBitsPerSec = smoothedTxRate * 8;

                        // Update chart datasets
                        const rxDataset = chart.data.datasets.find(d => d.interfaceName === ifaceName && d.dataType === 'rx');
                        if (rxDataset) {
                            rxDataset.data.shift();
                            rxDataset.data.push(rxBitsPerSec);
                        }

                        const txDataset = chart.data.datasets.find(d => d.interfaceName === ifaceName && d.dataType === 'tx');
                        if (txDataset) {
                            txDataset.data.shift();
                            txDataset.data.push(txBitsPerSec);
                        }

                        // Update previousData untuk iterasi berikutnya
                        previousData[ifaceName] = { rx: rxBytes, tx: txBytes };

                        // Update speed display
                        const rxSpeedEl = document.querySelector(`[data-speed-rx="${ifaceName}"]`);
                        const txSpeedEl = document.querySelector(`[data-speed-tx="${ifaceName}"]`);
                        if (rxSpeedEl) rxSpeedEl.textContent = formatSpeed(rxBitsPerSec);
                        if (txSpeedEl) txSpeedEl.textContent = formatSpeed(txBitsPerSec);
                    }
                });

                chart.update('none');
            } catch (error) {
                console.error('Error updating interface stats:', error);
                failedAttempts++;
                
                // Auto-recovery after multiple failures
                if (failedAttempts >= MAX_FAILED_ATTEMPTS && isMonitoring) {
                    console.log('Connection error detected, attempting auto-recovery...');
                    // Clear old data to show we're recovering
                    chart.data.datasets.forEach(dataset => {
                        dataset.data = Array(30).fill(0);
                    });
                    chart.update('none');
                }
            }
        }, 2000);
    }

    function toggleMonitoring() {
        const select = document.getElementById('interfaceSelect');
        const btn = document.getElementById('monitoringBtn');
        const selectedOptions = Array.from(select.selectedOptions);

        if (!isMonitoring) {
            if (selectedOptions.length === 0) {
                alert('Pilih minimal 1 interface untuk monitoring');
                return;
            }

            const selectedInterfaces = selectedOptions.map((opt, idx) => ({
                name: opt.value,
                running: opt.dataset.running === 'true',
                color: colors[idx % colors.length]
            }));

            if (!chart) initChart();
            updateChart(selectedInterfaces);
            startUpdateInterval();

            btn.innerHTML = '<i class="fas fa-stop mr-2"></i>Stop Monitor';
            btn.classList.remove('bg-blue-600', 'hover:bg-blue-700');
            btn.classList.add('bg-red-600', 'hover:bg-red-700');
            select.disabled = true;
            isMonitoring = true;
        } else {
            if (updateInterval) clearInterval(updateInterval);
            updateInterval = null;

            // Reset data untuk start yang bersih
            previousData = {};
            smoothingBuffer = {};
            lastValidRate = {};
            failedAttempts = 0;

            btn.innerHTML = '<i class="fas fa-play mr-2"></i>Start Monitor';
            btn.classList.remove('bg-red-600', 'hover:bg-red-700');
            btn.classList.add('bg-blue-600', 'hover:bg-blue-700');
            select.disabled = false;
            isMonitoring = false;
        }
    }

    document.addEventListener('DOMContentLoaded', function() {
        const select = document.getElementById('interfaceSelect');
        if (select && select.options.length > 0) {
            select.options[0].selected = true;
        }
    });
    <% } %>
    </script>
</div>

<%- include('../../partials/footer') %>

