<!DOCTYPE html>
<html lang="id">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>WhatsApp Web Binding</title>
    <link rel="stylesheet" href="/assets/styles.css">
    <!-- QRCode library tidak diperlukan karena backend generate QR sebagai base64 image -->
</head>
<body>
    <div class="min-h-screen bg-gray-50">
        <!-- Header -->
        <div class="bg-white shadow-sm border-b border-gray-200">
            <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
                <div class="flex justify-between items-center py-6">
                    <div class="flex items-center">
                        <div class="flex-shrink-0">
                            <div class="w-10 h-10 bg-green-500 rounded-lg flex items-center justify-center">
                                <svg class="w-6 h-6 text-white" fill="currentColor" viewBox="0 0 24 24">
                                    <path d="M17.472 14.382c-.297-.149-1.758-.867-2.03-.967-.273-.099-.471-.148-.67.15-.197.297-.767.966-.94 1.164-.173.199-.347.223-.644.075-.297-.15-1.255-.463-2.39-1.475-.883-.788-1.48-1.761-1.653-2.059-.173-.297-.018-.458.13-.606.134-.133.298-.347.446-.52.149-.174.198-.298.298-.497.099-.198.05-.371-.025-.52-.075-.149-.669-1.612-.916-2.207-.242-.579-.487-.5-.669-.51-.173-.008-.371-.01-.57-.01-.198 0-.52.074-.792.372-.272.297-1.04 1.016-1.04 2.479 0 1.462 1.065 2.875 1.213 3.074.149.198 2.096 3.2 5.077 4.487.709.306 1.262.489 1.694.625.712.227 1.36.195 1.871.118.571-.085 1.758-.719 2.006-1.413.248-.694.248-1.289.173-1.413-.074-.124-.272-.198-.57-.347m-5.421 7.403h-.004a9.87 9.87 0 01-5.031-1.378l-.361-.214-3.741.982.998-3.648-.235-.374a9.86 9.86 0 01-1.51-5.26c.001-5.45 4.436-9.884 9.888-9.884 2.64 0 5.122 1.03 6.988 2.898a9.825 9.825 0 012.893 6.994c-.003 5.45-4.437 9.884-9.885 9.884m8.413-18.297A11.815 11.815 0 0012.05 0C5.495 0 .16 5.335.157 11.892c0 2.096.547 4.142 1.588 5.945L.057 24l6.305-1.654a11.882 11.882 0 005.683 1.448h.005c6.554 0 11.89-5.335 11.893-11.893A11.821 11.821 0 0020.885 3.488"/>
                                </svg>
                            </div>
                        </div>
                        <div class="ml-4">
                            <h1 class="text-2xl font-bold text-gray-900">WhatsApp Web Binding</h1>
                            <p class="text-sm text-gray-500">Hubungkan WhatsApp Web dengan sistem billing</p>
                        </div>
                    </div>
                    <div class="flex items-center space-x-4">
                        <div id="connectionStatus" class="flex items-center space-x-2">
                            <div class="w-3 h-3 bg-red-400 rounded-full"></div>
                            <span class="text-sm text-gray-600">Tidak Terkoneksi</span>
                        </div>
                        <button id="refreshBtn" class="bg-green-500 hover:bg-green-600 text-white px-4 py-2 rounded-lg text-sm font-medium transition-colors">
                            Refresh
                        </button>
                    </div>
                </div>
            </div>
        </div>

        <!-- Main Content -->
        <div class="max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
            <!-- Connection Status Card -->
            <div class="bg-white rounded-xl shadow-sm border border-gray-200 mb-8">
                <div class="px-6 py-4 border-b border-gray-200">
                    <h3 class="text-lg font-semibold text-gray-900">Status Koneksi</h3>
                </div>
                <div class="p-6">
                    <div class="flex items-center justify-between">
                        <div class="flex items-center space-x-3">
                            <div id="statusIndicator" class="w-4 h-4 bg-red-400 rounded-full"></div>
                            <span id="statusText" class="text-sm font-medium text-gray-900">Tidak Terkoneksi</span>
                        </div>
                        <div class="flex space-x-2">
                            <button id="reconnectBtn" class="bg-blue-500 hover:bg-blue-600 text-white px-4 py-2 rounded-lg text-sm font-medium transition-colors">
                                Reconnect
                            </button>
                            <button id="disconnectBtn" class="bg-red-500 hover:bg-red-600 text-white px-4 py-2 rounded-lg text-sm font-medium transition-colors">
                                Disconnect
                            </button>
                        </div>
                    </div>
                </div>
            </div>

            <!-- QR Code Card -->
            <div class="bg-white rounded-xl shadow-sm border border-gray-200">
                <div class="px-6 py-4 border-b border-gray-200">
                    <h3 class="text-lg font-semibold text-gray-900">Scan QR Code</h3>
                    <p class="text-sm text-gray-500">Gunakan WhatsApp di ponsel Anda untuk memindai QR code ini</p>
                </div>
                <div class="p-6">
                    <div class="flex flex-col items-center space-y-6">
                        <!-- QR Code Display -->
                        <div id="qrCodeContainer" class="p-4 bg-white border-2 border-gray-200 rounded-lg">
                            <div id="qrCode" class="w-64 h-64 flex items-center justify-center bg-gray-100 rounded-lg">
                                <div class="text-center">
                                    <div class="animate-spin rounded-full h-8 w-8 border-b-2 border-green-500 mx-auto mb-4"></div>
                                    <p class="text-sm text-gray-500">Generating QR Code...</p>
                                </div>
                            </div>
                        </div>

                        <!-- Instructions -->
                        <div class="text-center max-w-md">
                            <h4 class="text-lg font-medium text-gray-900 mb-2">Cara Binding WhatsApp Web:</h4>
                            <ol class="text-sm text-gray-600 space-y-2 text-left">
                                <li>1. Klik tombol "Generate QR Code" (tunggu 30-60 detik pertama kali)</li>
                                <li>2. Buka WhatsApp di ponsel Anda</li>
                                <li>3. Ketuk Menu (â‹®) > <strong>Linked Devices</strong></li>
                                <li>4. Ketuk <strong>"Link a Device"</strong></li>
                                <li>5. Scan QR code di atas dengan kamera ponsel</li>
                                <li>6. Tunggu konfirmasi koneksi berhasil</li>
                            </ol>
                            <div class="mt-4 p-3 bg-yellow-50 border border-yellow-200 rounded-lg">
                                <p class="text-xs text-yellow-800">
                                    <i class="fas fa-info-circle mr-1"></i>
                                    <strong>Catatan:</strong> Proses generate QR code pertama kali membutuhkan waktu 30-60 detik karena sistem perlu menginisialisasi WhatsApp Web client. Harap bersabar.
                                </p>
                            </div>
                        </div>

                        <!-- Action Buttons -->
                        <div class="flex space-x-4">
                            <button id="generateQRBtn" class="bg-green-500 hover:bg-green-600 text-white px-6 py-2 rounded-lg font-medium transition-colors">
                                Generate QR Code
                            </button>
                            <button id="checkStatusBtn" class="bg-blue-500 hover:bg-blue-600 text-white px-6 py-2 rounded-lg font-medium transition-colors">
                                Cek Status
                            </button>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Connection Logs -->
            <div class="bg-white rounded-xl shadow-sm border border-gray-200 mt-8">
                <div class="px-6 py-4 border-b border-gray-200">
                    <h3 class="text-lg font-semibold text-gray-900">Log Koneksi</h3>
                </div>
                <div class="p-6">
                    <div id="connectionLogs" class="space-y-2 max-h-64 overflow-y-auto">
                        <div class="text-center text-gray-500 py-4">
                            <div class="animate-spin rounded-full h-6 w-6 border-b-2 border-gray-400 mx-auto mb-2"></div>
                            <p>Loading logs...</p>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <script>
        // Global variables
        let qrCodeGenerated = false;
        let statusCheckInterval = null;

        // DOM elements
        const qrCodeContainer = document.getElementById('qrCode');
        const statusIndicator = document.getElementById('statusIndicator');
        const statusText = document.getElementById('statusText');
        const connectionStatus = document.getElementById('connectionStatus');
        const connectionLogs = document.getElementById('connectionLogs');

        // Buttons
        const generateQRBtn = document.getElementById('generateQRBtn');
        const checkStatusBtn = document.getElementById('checkStatusBtn');
        const refreshBtn = document.getElementById('refreshBtn');
        const reconnectBtn = document.getElementById('reconnectBtn');
        const disconnectBtn = document.getElementById('disconnectBtn');

        // Initialize
        document.addEventListener('DOMContentLoaded', function() {
            generateQRCode();
            checkConnectionStatus();
            loadConnectionLogs();
            startStatusCheck();
        });

        // Generate QR Code
        async function generateQRCode() {
            try {
                generateQRBtn.disabled = true;
                generateQRBtn.innerHTML = '<i class="fas fa-spinner fa-spin mr-2"></i>Generating...';
                
                // Show progress indicator
                qrCodeContainer.innerHTML = `
                    <div class="text-center p-8">
                        <div class="animate-spin rounded-full h-12 w-12 border-b-4 border-green-500 mx-auto mb-4"></div>
                        <p class="text-sm text-gray-600 font-medium">Initializing WhatsApp Web Client...</p>
                        <p class="text-xs text-gray-500 mt-2">This may take 30-60 seconds on first run</p>
                        <div class="mt-4 flex items-center justify-center space-x-2">
                            <div class="w-2 h-2 bg-green-500 rounded-full animate-pulse"></div>
                            <div class="w-2 h-2 bg-green-500 rounded-full animate-pulse" style="animation-delay: 0.2s"></div>
                            <div class="w-2 h-2 bg-green-500 rounded-full animate-pulse" style="animation-delay: 0.4s"></div>
                        </div>
                    </div>
                `;
                
                addLog('Requesting QR code from server...', 'info');
                
                const response = await fetch('/whatsapp-web/qr');
                
                if (!response.ok) {
                    throw new Error(`HTTP error! status: ${response.status}`);
                }
                
                const data = await response.json();
                
                if (data.success && data.qrCode) {
                    // QR code is base64 data URL
                    qrCodeContainer.innerHTML = `
                        <div class="relative">
                            <img src="${data.qrCode}" alt="QR Code" class="w-64 h-64 border-4 border-green-400 rounded-lg shadow-lg">
                            <div class="absolute -top-2 -right-2 bg-green-500 text-white rounded-full p-2">
                                <i class="fas fa-check text-sm"></i>
                            </div>
                        </div>
                    `;
                    qrCodeGenerated = true;
                    generateQRBtn.innerHTML = '<i class="fas fa-redo mr-2"></i>Regenerate QR Code';
                    addLog('QR Code generated successfully! Ready to scan.', 'success');
                } else {
                    throw new Error(data.error || data.message || 'Failed to generate QR code');
                }
            } catch (error) {
                console.error('Error generating QR code:', error);
                qrCodeContainer.innerHTML = `
                    <div class="text-center text-red-500 p-4">
                        <i class="fas fa-exclamation-triangle text-4xl mb-3"></i>
                        <p class="font-semibold text-lg">Error Generating QR Code</p>
                        <p class="text-sm mt-2 text-gray-600">${error.message}</p>
                        <button onclick="generateQRCode()" class="mt-4 bg-green-500 text-white px-6 py-2 rounded-lg hover:bg-green-600 transition-colors">
                            <i class="fas fa-redo mr-2"></i>Retry
                        </button>
                    </div>
                `;
                addLog(`Error: ${error.message}`, 'failed');
            } finally {
                generateQRBtn.disabled = false;
                if (!qrCodeGenerated) {
                    generateQRBtn.innerHTML = '<i class="fas fa-qrcode mr-2"></i>Generate QR Code';
                }
            }
        }

        // Check connection status
        async function checkConnectionStatus() {
            try {
                const response = await fetch('/whatsapp-web/status');
                
                if (!response.ok) {
                    throw new Error(`HTTP error! status: ${response.status}`);
                }
                
                const data = await response.json();
                
                if (data.success !== undefined) {
                    updateConnectionStatus(data.ready || false, data.connected || false);
                    if (data.phoneNumber) {
                        statusText.textContent = `Terkoneksi - ${data.phoneNumber}`;
                    }
                }
            } catch (error) {
                console.error('Error checking connection status:', error);
                updateConnectionStatus(false, false);
            }
        }

        // Track previous status for notification
        let previousReady = false;

        // Update connection status UI
        function updateConnectionStatus(ready, connected) {
            if (ready) {
                statusIndicator.className = 'w-4 h-4 bg-green-400 rounded-full';
                statusText.textContent = 'Terkoneksi & Siap';
                connectionStatus.innerHTML = `
                    <div class="w-3 h-3 bg-green-400 rounded-full animate-pulse"></div>
                    <span class="text-sm text-gray-600">Terkoneksi & Siap</span>
                `;
                
                // Show success notification if status just changed to ready
                if (!previousReady) {
                    showSuccessNotification();
                    previousReady = true;
                }
            } else if (connected) {
                statusIndicator.className = 'w-4 h-4 bg-yellow-400 rounded-full';
                statusText.textContent = 'Menunggu Scan QR...';
                connectionStatus.innerHTML = `
                    <div class="w-3 h-3 bg-yellow-400 rounded-full animate-pulse"></div>
                    <span class="text-sm text-gray-600">Menunggu Scan QR...</span>
                `;
                previousReady = false;
            } else {
                statusIndicator.className = 'w-4 h-4 bg-red-400 rounded-full';
                statusText.textContent = 'Tidak Terkoneksi';
                connectionStatus.innerHTML = `
                    <div class="w-3 h-3 bg-red-400 rounded-full"></div>
                    <span class="text-sm text-gray-600">Tidak Terkoneksi</span>
                `;
                previousReady = false;
            }
        }

        // Show success notification
        function showSuccessNotification() {
            // Create notification element
            const notification = document.createElement('div');
            notification.className = 'fixed top-4 right-4 z-50 transform transition-all duration-500 ease-out';
            notification.innerHTML = `
                <div class="bg-green-500 text-white px-6 py-4 rounded-lg shadow-2xl flex items-center space-x-3 min-w-[300px]">
                    <div class="flex-shrink-0">
                        <svg class="w-8 h-8" fill="currentColor" viewBox="0 0 20 20">
                            <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clip-rule="evenodd"/>
                        </svg>
                    </div>
                    <div class="flex-1">
                        <p class="font-bold text-lg">Binding Berhasil!</p>
                        <p class="text-sm opacity-90">WhatsApp Web berhasil terhubung dan siap digunakan</p>
                    </div>
                    <button onclick="this.parentElement.parentElement.remove()" class="text-white hover:text-gray-200">
                        <svg class="w-5 h-5" fill="currentColor" viewBox="0 0 20 20">
                            <path fill-rule="evenodd" d="M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z" clip-rule="evenodd"/>
                        </svg>
                    </button>
                </div>
            `;
            
            document.body.appendChild(notification);
            
            // Play sound (optional)
            const audio = new Audio('data:audio/wav;base64,UklGRnoGAABXQVZFZm10IBAAAAABAAEAQB8AAEAfAAABAAgAZGF0YQoGAACBhYqFbF1fdJivrJBhNjVgodDbq2EcBj+a2/LDciUFLIHO8tiJNwgZaLvt559NEAxQp+PwtmMcBjiR1/LMeSwFJHfH8N2QQAoUXrTp66hVFApGn+DyvmwhBSuBzvLZiTYIEjnEyZKPZhlYuNP6z3QoPVWw5O2wYxwGOJHX8sx5LAUkd8fw3ZBAChRet+nrqFUUCkag4PKPBhVVAAAA');
            audio.volume = 0.3;
            audio.play().catch(() => {}); // Ignore audio errors
            
            // Auto remove after 10 seconds
            setTimeout(() => {
                notification.style.opacity = '0';
                notification.style.transform = 'translateX(400px)';
                setTimeout(() => notification.remove(), 500);
            }, 10000);
            
            // Also show in logs
            addLog('âœ… BINDING BERHASIL! WhatsApp Web terhubung dan siap digunakan', 'success');
        }

        // Load connection logs
        async function loadConnectionLogs() {
            try {
                const response = await fetch('/whatsapp-web/logs');
                
                if (!response.ok) {
                    throw new Error(`HTTP error! status: ${response.status}`);
                }
                
                const data = await response.json();
                
                if (data.success && data.logs) {
                    displayConnectionLogs(data.logs);
                } else if (Array.isArray(data)) {
                    displayConnectionLogs(data);
                } else {
                    throw new Error('Invalid logs format');
                }
            } catch (error) {
                console.error('Error loading connection logs:', error);
                connectionLogs.innerHTML = `
                    <div class="text-center text-gray-500 py-4">
                        <i class="fas fa-info-circle text-2xl mb-2"></i>
                        <p>No connection logs available</p>
                        <p class="text-xs mt-1">${error.message}</p>
                    </div>
                `;
            }
        }

        // Add log entry
        function addLog(message, status = 'info') {
            const logEntry = {
                action: message,
                status: status,
                created_at: new Date().toISOString()
            };
            
            const logHTML = `
                <div class="flex items-center justify-between p-3 bg-gray-50 rounded-lg">
                    <div class="flex items-center space-x-3">
                        <div class="w-2 h-2 rounded-full ${status === 'success' ? 'bg-green-400' : status === 'failed' ? 'bg-red-400' : 'bg-blue-400'}"></div>
                        <div>
                            <p class="text-sm font-medium text-gray-900">${message}</p>
                            <p class="text-xs text-gray-500">${new Date().toLocaleString()}</p>
                        </div>
                    </div>
                    <div class="text-right">
                        <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${status === 'success' ? 'bg-green-100 text-green-800' : status === 'failed' ? 'bg-red-100 text-red-800' : 'bg-blue-100 text-blue-800'}">
                            ${status}
                        </span>
                    </div>
                </div>
            `;
            
            connectionLogs.insertAdjacentHTML('afterbegin', logHTML);
        }

        // Display connection logs
        function displayConnectionLogs(logs) {
            if (logs.length === 0) {
                connectionLogs.innerHTML = `
                    <div class="text-center text-gray-500 py-4">
                        <p>No connection logs available</p>
                    </div>
                `;
                return;
            }

            const logsHTML = logs.map(log => `
                <div class="flex items-center justify-between p-3 bg-gray-50 rounded-lg">
                    <div class="flex items-center space-x-3">
                        <div class="w-2 h-2 rounded-full ${log.status === 'success' ? 'bg-green-400' : 'bg-red-400'}"></div>
                        <div>
                            <p class="text-sm font-medium text-gray-900">${log.action}</p>
                            <p class="text-xs text-gray-500">${new Date(log.created_at).toLocaleString()}</p>
                        </div>
                    </div>
                    <div class="text-right">
                        <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${log.status === 'success' ? 'bg-green-100 text-green-800' : 'bg-red-100 text-red-800'}">
                            ${log.status}
                        </span>
                    </div>
                </div>
            `).join('');

            connectionLogs.innerHTML = logsHTML;
        }

        // Start status check interval
        function startStatusCheck() {
            statusCheckInterval = setInterval(checkConnectionStatus, 5000); // Check every 5 seconds
        }

        // Stop status check interval
        function stopStatusCheck() {
            if (statusCheckInterval) {
                clearInterval(statusCheckInterval);
                statusCheckInterval = null;
            }
        }

        // Event listeners
        generateQRBtn.addEventListener('click', generateQRCode);
        checkStatusBtn.addEventListener('click', checkConnectionStatus);
        refreshBtn.addEventListener('click', () => {
            checkConnectionStatus();
            loadConnectionLogs();
        });

        reconnectBtn.addEventListener('click', async () => {
            try {
                reconnectBtn.disabled = true;
                reconnectBtn.textContent = 'Reconnecting...';
                
                const response = await fetch('/whatsapp-web/reconnect', { method: 'POST' });
                const data = await response.json();
                
                if (data.success) {
                    await generateQRCode();
                    checkConnectionStatus();
                } else {
                    alert('Failed to reconnect: ' + (data.error || 'Unknown error'));
                }
            } catch (error) {
                console.error('Error reconnecting:', error);
                alert('Error reconnecting: ' + error.message);
            } finally {
                reconnectBtn.disabled = false;
                reconnectBtn.textContent = 'Reconnect';
            }
        });

        disconnectBtn.addEventListener('click', async () => {
            try {
                disconnectBtn.disabled = true;
                disconnectBtn.textContent = 'Disconnecting...';
                
                const response = await fetch('/whatsapp-web/disconnect', { method: 'POST' });
                const data = await response.json();
                
                if (data.success) {
                    updateConnectionStatus(false);
                    checkConnectionStatus();
                } else {
                    alert('Failed to disconnect: ' + (data.error || 'Unknown error'));
                }
            } catch (error) {
                console.error('Error disconnecting:', error);
                alert('Error disconnecting: ' + error.message);
            } finally {
                disconnectBtn.disabled = false;
                disconnectBtn.textContent = 'Disconnect';
            }
        });

        // Cleanup on page unload
        window.addEventListener('beforeunload', stopStatusCheck);
    </script>
</body>
</html>
