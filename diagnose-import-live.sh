#!/bin/bash

# ========================================
# Import Excel Diagnostic Tool
# ========================================
# Script untuk diagnose kenapa import Excel
# gagal di live server tapi sukses di local
# ========================================

echo "üîç DIAGNOSTIC IMPORT EXCEL - LIVE SERVER"
echo "========================================"
echo ""

# 1. Check Node.js version
echo "1Ô∏è‚É£ Checking Node.js version..."
node --version
npm --version
echo ""

# 2. Check uploads directory
echo "2Ô∏è‚É£ Checking uploads directory..."
if [ -d "uploads" ]; then
    echo "‚úÖ uploads directory exists"
    ls -la uploads/
    echo ""
    echo "Permissions:"
    stat -c "%a %U:%G %n" uploads/
else
    echo "‚ùå uploads directory NOT found"
    echo "Creating uploads directory..."
    mkdir -p uploads
    chmod 755 uploads
    echo "‚úÖ uploads directory created"
fi
echo ""

# 3. Check required npm packages
echo "3Ô∏è‚É£ Checking required packages..."
packages=("multer" "xlsx")
for pkg in "${packages[@]}"; do
    if npm list $pkg >/dev/null 2>&1; then
        version=$(npm list $pkg | grep $pkg | awk '{print $2}')
        echo "‚úÖ $pkg@$version installed"
    else
        echo "‚ùå $pkg NOT installed"
    fi
done
echo ""

# 4. Check file size limits (nginx)
echo "4Ô∏è‚É£ Checking Nginx configuration..."
if command -v nginx &> /dev/null; then
    echo "Nginx version:"
    nginx -v
    echo ""
    echo "Checking client_max_body_size..."
    grep -r "client_max_body_size" /etc/nginx/ 2>/dev/null || echo "‚ö†Ô∏è  client_max_body_size not set (using default 1MB)"
else
    echo "‚ö†Ô∏è  Nginx not found"
fi
echo ""

# 5. Check PM2 logs for import errors
echo "5Ô∏è‚É£ Checking PM2 logs for import errors..."
if command -v pm2 &> /dev/null; then
    echo "Recent import-related logs:"
    pm2 logs billing --lines 50 --nostream | grep -i "import\|excel\|multer" || echo "No import errors in recent logs"
else
    echo "‚ö†Ô∏è  PM2 not found"
fi
echo ""

# 6. Check disk space
echo "6Ô∏è‚É£ Checking disk space..."
df -h . | tail -1
echo ""

# 7. Check memory
echo "7Ô∏è‚É£ Checking memory..."
free -h | head -2
echo ""

# 8. Check file permissions for src
echo "8Ô∏è‚É£ Checking source file permissions..."
if [ -f "src/routes/index.ts" ]; then
    echo "‚úÖ src/routes/index.ts exists"
    stat -c "%a %U:%G %n" src/routes/index.ts
else
    echo "‚ùå src/routes/index.ts NOT found"
fi

if [ -f "src/controllers/customerController.ts" ]; then
    echo "‚úÖ src/controllers/customerController.ts exists"
    stat -c "%a %U:%G %n" src/controllers/customerController.ts
else
    echo "‚ùå src/controllers/customerController.ts NOT found"
fi
echo ""

# 9. Test file upload endpoint
echo "9Ô∏è‚É£ Testing /customers/import endpoint..."
if command -v curl &> /dev/null; then
    response=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:3000/customers/list)
    if [ "$response" == "200" ]; then
        echo "‚úÖ Application is running (HTTP $response)"
    else
        echo "‚ö†Ô∏è  Application returned HTTP $response"
    fi
else
    echo "‚ö†Ô∏è  curl not found, skipping endpoint test"
fi
echo ""

# 10. Check environment variables
echo "üîü Checking environment variables..."
if [ -f ".env" ]; then
    echo "‚úÖ .env file exists"
    echo "NODE_ENV: ${NODE_ENV:-not set}"
else
    echo "‚ö†Ô∏è  .env file not found"
fi
echo ""

echo "========================================"
echo "‚úÖ DIAGNOSTIC COMPLETE"
echo "========================================"
echo ""
echo "üìã RECOMMENDATIONS:"
echo ""
echo "If uploads directory had wrong permissions:"
echo "  sudo chmod 755 uploads"
echo "  sudo chown -R \$USER:\$USER uploads"
echo ""
echo "If Nginx client_max_body_size too small:"
echo "  Edit: /etc/nginx/nginx.conf"
echo "  Add: client_max_body_size 10M;"
echo "  Run: sudo systemctl reload nginx"
echo ""
echo "If packages missing:"
echo "  npm install"
echo ""
echo "If PM2 needs restart:"
echo "  pm2 restart billing"
echo ""

